# List of "system" namespaces.
systemNamespaces:
  - kube-system
  - kube-public
  - kube-node-lease
  - kyverno

# Policy configuration area
policies:
     
# aks-kyverno-policies/templates/create-network-policy.yaml`
# DESCRIPTION: Policy creates a specified network policy when you create or edit K8S namespace
# MOTIVATION: According the best kubernetes security practices communication between namespaces should 
# be restricted and only necessary traffic is allowed. 
  createNetworkPolicy:
    enabled: false
    background: true
    synchronize: true
    excludeSystemNamespaces: true
    excludedNamespaces: []
    matchLabels:
      creator: ns-service
    networkPolicyname: default-np 
    spec: {}
      # podSelector: {}
      # policyTypes:
      # - Egress
      # - Ingress              
      # egress:
      # - ports:
      #   - protocol: TCP
      #     port: 53
      #   - protocol: UDP
      #     port: 53          
      # - to:
      #   - namespaceSelector: {}
      #     podSelector:
      #       matchLabels:
      #         app: "consul"
      #   ports: 
      #   - protocol: TCP
      #     port: 8443
      #   - protocol: TCP
      #     port: 8501
      #   - protocol: TCP
      #     port: 8502
      # ingress:
      # - from:
      #   ports:
      #   - protocol: TCP
      #     port: 20000
      #   - protocol: UDP
      #     port: 20000

# aks-kyverno-policies/templates/create-limit-ranges.yaml
# DESCRIPTION: Policy creates a limit ranges when you create or edit K8S namespace
# MOTIVATION: Using resource limit ranges controls the default requests and limits and may prevent 
# from cluster overload.
  createLimitRanges:
    enabled: true
    background: true
    synchronize: true
    excludeSystemNamespaces: true
    matchLabels:
      creator: ns-service
    resourceQuotaName: default-container-compute
    excludedNamespaces: []
    spec: {}
      # limits:
      # - default: 
      #     cpu: '0.5'
      #     memory: '512Mi'
      #   defaultRequest:
      #     cpu: '0.25'
      #     memory: '256Mi'
      #   type: Container                       

# aks-kyverno-policies/templates/create-resource-quotas.yaml
# DESCRIPTION: Policy creates a resource quota when you create or edit K8S namespace
# MOTIVATION: Using resource quotas prevents cases when one application can take all cluster resources
# and overloads the cluster
  createResourceQuotas:
    enabled: true
    background: true
    synchronize: true
    excludeSystemNamespaces: true
    matchLabels:
      creator: ns-service
    resourceQuotaName: default-ns-compute
    excludedNamespaces: []
    spec: {}
      # hard:
      #   limits.cpu: '4'
      #   limits.memory: '3Gi'
      #   requests.cpu: '2'
      #   requests.memory: '2Gi'   

# aks-kyverno-policies/templates/replace-resource-requests.yaml
# DESCRIPTION: Policy modifies a pod.spec and replaces or adds if not exists resource requests.
# MOTIVATION: High request may reserve all cluster resources without real need and will block scheduling
# new pods. 
  replaceResourceRequests:    
    enabled: false
    excludeSystemNamespaces: true
    excludedNamespaces: []
    requests: {}
      # memory: "128Mi"
      # cpu: 100m

# aks-kyverno-policies/templates/require-labels.yaml
# DESCRIPTION: Policy requires for specified labels to be applied on specified resources 
# MOTIVATION: Labels are essential part of kubernetes resources which allows easier manage resources,
# select them, create reports, get basic info about.
  requireLabels:
    enabled: true
    excludeSystemNamespaces: true
    kinds:
    - Namespace  
    validationFailureAction: audit
    background: true
    excludedNamespaces: []
    labels: []
    # - app
    # - responsible

# aks-kyverno-policies/templates/require-read-only-root-filesystem.yaml
# DESCRIPTION: Policy requires for read only root filesystem.
# MOTIVATION: A read-only root file system helps to enforce an immutable infrastructure strategy; 
# the container only needs to write on the mounted volume that persists the state. 
# An immutable root filesystem can also prevent malicious binaries from writing to the 
# host system.  
  requireReadOnlyRootFileSystem:
    enabled: true
    excludeSystemNamespaces: true
    validationFailureAction: audit
    background: true
    excludedNamespaces: []


# aks-kyverno-policies/templates/require-run-as-non-root.yaml
# DESCRIPTION: Policy requires for container to run as non root
# MOTIVATION: Containers that run as root frequently have far more permissions than 
# their workload requires which, 
# in case of compromise, could help an attacker further their attack
  requireRunAsNonRoot:
    enabled: true
    excludeSystemNamespaces: true
    validationFailureAction: audit
    background: true
    excludedNamespaces: []

# aks-kyverno-policies/templates/restrict-default-namespace.yaml
# DESCRIPTION: Policy restricts Pod, Deployments, StateFulSets, DaemonSets creation in the default K8S namespace  
# MOTIVATION: Kubernetes namespaces are an optional feature that provide a way to segment and 
# isolate cluster resources across multiple applications and users. As a best 
# practice, workloads should be isolated with namespaces. Namespaces should be required 
# and the default (empty) namespace should not be used.
  restrictDefaultNamespace:
    enabled: true
    validationFailureAction: enforce
    background: true   

# aks-kyverno-policies/templates/restrict-image-registries.yaml
# DESCRIPTION: Policy restricts usage of public container registries and allows to pull images only from specified
# registries.
# MOTIVATION: External image registries are not secure so it's important to accept images only from private
# and trusted registries    
  restrictImageRegistries:
    excludedNamespaces: []
    excludeSystemNamespaces: true
    enabled: true
    validationFailureAction: enforce
    background: true
    allowedRegistries: 
      mcr.microsoft.com/* | 
      mcr.azk8s.cn/*

# aks-kyverno-policies/templates/restrict-external-loadbalancer.yaml  
# DESCRIPTION: Policy restricts usage of external load balancers
# MOTIVATION: In AKS LoadBalancer service exposes deployment via Azure LoadBalancer resource
# by default external type of Azure LB created which is publicly exposed and insecure. So according 
# the best practices internal lb type should be created instead.      
  restrictExternalLoadBalancer:
    excludedNamespaces: []
    excludeSystemNamespaces: false
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-privileged-containers.yaml
# DESCRIPTION: Policy restricts usage of privileged mode in containers 
# MOTIVATION: Privileged mode disables most security mechanisms and must not be allowed
  restrictPrivilegedContainers:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-privilege-escalation.yaml
# DESCRIPTION: This policy ensures the `allowPrivilegeEscalation` fields are either undefined or set to `false` 
# MOTIVATION: Privilege escalation, such as via set-user-ID or set-group-ID file mode, should not be allowed.
  restrictPrivilegeEscalation:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: audit
    background: true      

# aks-kyverno-policies/templates/restrict-host-path.yaml
# DESCRIPTION: Policy restricts usage of host paths
# MOTIVATION: HostPath volumes let pods use host directories and volumes in containers.
# Using host resources can be used to access shared data or escalate privileges
# and should not be allowed.         
  restrictHostPath:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-host-ports.yaml
# DESCRIPTION: Policy restricts usage of host ports
# MOTIVATION: Access to host ports allows potential snooping of network traffic and should not be
# allowed, or at minimum restricted to a known list.
  restrictHostPorts:
    excludedNamespaces: []
    excludeSystemNamespaces: true
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-node-ports.yaml
# DESCRIPTION: Policy restricts usage of NodePort service type
# MOTIVATION: A Kubernetes service of type NodePort uses a host port to receive traffic from 
# any source. A 'NetworkPolicy' resource cannot be used to control traffic to host ports. 
# Although 'NodePort' services can be useful, their use must be limited to services 
# with additional upstream security checks.  
  restrictNodePorts:
    excludedNamespaces: []
    excludeSystemNamespaces: false
    enabled: true
    validationFailureAction: enforce
    background: true    
    
# aks-kyverno-policies/templates/restrict-proc-mounts.yaml
# DESCRIPTION: Policy restricts changing the proc mount from the default                
# MOTIVATION: The default /proc masks are set up to reduce attack surface and should be required  
  restrictProcMount:
    excludedNamespaces: []
    excludeSystemNamespaces: true
    enabled: true
    validationFailureAction: enforce
    background: true
  
# aks-kyverno-policies/templates/restrict-add-capabilities.yaml    
# DESCRIPTION: Policy restricts adding of additional capabilities beyond the default set
# MOTIVATION: Capabilities permit privileged actions without giving full root access.
# Adding capabilities beyond the default set must not be allowed. 
  restrictAddCapabilities:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: audit
    background: true

# aks-kyverno-policies/templates/restrict-host-namespaces.yaml
# DESCRIPTION: Policy restricts usage of host namespaces
# MOTIVATION: Host namespaces (Process ID namespace, Inter-Process Communication namespace, and
# network namespace) allow access to shared information and can be used to elevate
# privileges. Pods should not be allowed access to host namespaces.          
  restrictHostNamespaces:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-selinux.yaml
# DESCRIPTION: Policy restricts setting custom SELinux options
# MOTIVATION: SELinux options can be used to escalate privileges and should not be allowed.                  
  restrictSelinux:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-sysctls.yaml
# DESCRIPTION: Policy restricts Setting additional sysctls above the allowed type
# MOTIVATION: Sysctls can disable security mechanisms or affect all containers on a
# host, and should be disallowed except for an allowed "safe" subset. A
# sysctl is considered safe if it is namespaced in the container or the
# Pod, and it is isolated from other Pods or processes on the same Node.                  
  restrictSysctls:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/restrict-apparmor.yaml
# DESCRIPTION: Policy restricts specifying AppArmor profiles other than `runtime\default`                    
# MOTIVATION: On supported hosts, the 'runtime/default' AppArmor profile is applied by default. 
# The default policy should prevent overriding or disabling the policy, 
# or restrict overrides to an allowed set of profiles
  restrictAppArmor:
    excludeSystemNamespaces: true
    excludedNamespaces: []
    enabled: true
    validationFailureAction: enforce
    background: true

# aks-kyverno-policies/templates/check-deprecated-apis.yaml
# DESCRIPTION: Policy help to identify a resources with deprecated which 
# will be removed in upcoming kubernetes versions   
# MOTIVATION: Kubernetes APIs are sometimes deprecated and removed after a few releases. 
# As a best practice, older API versions should be replaced with newer versions. 
# This policy validates for APIs that are deprecated or scheduled for removal. 
  checkDeprecatedApis:
    enabled: true
    validationFailureAction: audit
    excludeSystemNamespaces: true
    excludedNamespaces: []

# aks-kyverno-policies/templates/restrict-cri-socket-mounts.yaml
# DESCRIPTION: Policy validates that the sockets used for CRI engines Docker, 
# Containerd, and CRI-O are not used
# MOTIVATION: Container daemon socket bind mounts allows access to the container engine on the node. 
# This access can be used for privilege escalation and to manage containers outside of Kubernetes, 
# and hence should not be allowed. 
  restrictCriSocketMounts:
    enabled: true
    background: true
    validationFailureAction: enforce
    excludeSystemNamespaces: true
    excludedNamespaces: []

# aks-kyverno-policies/templates/restrict-custom-runtimes.yaml
# DESCRIPTION: This policy, requiring Kubernetes v1.19 or later, ensures that only the `RuntimeDefault` 
# or `Localhost` is used as a `type` and that it is not unset.
# MOTIVATION: The runtime default seccomp profile must be required, 
# or only specific additional profiles should be allowed.  
  restrictCustomRuntimes:
    enabled: true
    background: true
    validationFailureAction: enforce
    excludeSystemNamespaces: true
    excludedNamespaces: []          